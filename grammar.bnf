# === Entry point ===

program         ::= declaration* EOF ;


# === Declarations ===

declaration     ::= classDecl
                |   funDecl
                |   letDecl
                |   statement ;

classDecl       ::= "class" IDENTIFIER ( "<" IDENTIFIER )?
                    "{" function* "}" ;
funDecl         ::= "fun" function ;
letDecl         ::= "let" IDENTIFIER ":" IDENTIFIER ( "=" expression )? ";" ;


# === Statements ===

statement       ::= exprStmt
                |   forStmt
                |   ifStmt
                |   printStmt
                |   returnStmt
                |   whileStmt
                |   block ;

exprStmt        ::= expression ";" ;
forStmt         ::= "for" "(" ( letDecl | exprStmt | ";" )
                              expression? ";"
                              expression? ")" statement ;
ifStmt          ::= "if" "(" expression ")" statement
                    ( "else" statement )? ;
printStmt       ::= "print" expression ";" ;
returnStmt      ::= "return" expression? ";" ;
whileStmt       ::= "while" "(" expression ")" statement ;
block           ::= "{" declaration* "}" ;


# === Expressions ===

expression     ::= assignment ;

assignment     ::= ( call "." )? IDENTIFIER "=" assignment
               |   logic_or ;

logic_or       ::= logic_and ( "or" logic_and )* ;
logic_and      ::= equality ( "and" equality )* ;
equality       ::= comparison ( ( "!=" | "==" ) comparison )* ;
comparison     ::= term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           ::= factor ( ( "-" | "+" ) factor )* ;
factor         ::= unary ( ( "/" | "*" ) unary )* ;

unary          ::= ( "!" | "-" ) unary | call ;
call           ::= primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary        ::= "true" | "false" | "this"
               |   NUMBER | STRING | IDENTIFIER | "(" expression ")"
               |   "super" "." IDENTIFIER ;


# === Utility rules ===

function       ::= IDENTIFIER "(" parameters? ")" block ;
parameters     ::= IDENTIFIER ( "," IDENTIFIER )* ;
arguments      ::= expression ( "," expression )* ;
